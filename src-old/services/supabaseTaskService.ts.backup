/**
 * üéØ Supabase Task Service
 * 
 * Bridges database schema to component interface for Light Work and Deep Work tasks.
 * Provides CRUD operations using Supabase MCP tools.
 */

import { Task, Subtask } from '@/components/tasks/TaskCard';

// Database record types from Supabase
interface LightWorkTaskDB {
  id: string;
  user_id: string;
  title: string;
  description?: string;
  priority: string;
  completed: boolean;
  original_date: string;
  task_date: string;
  estimated_duration?: number;
  tags?: string[];
  category?: string;
  created_at: string;
  updated_at: string;
  completed_at?: string;
  started_at?: string;
  actual_duration_min?: number;
}

interface LightWorkSubtaskDB {
  id: string;
  task_id: string;
  title: string;
  text: string;
  completed?: boolean;
  priority?: string;
  due_date?: string;
  created_at?: string;
  updated_at?: string;
  completed_at?: string;
  started_at?: string;
  actual_duration_min?: number;
}

interface DeepWorkTaskDB {
  id: string;
  user_id: string;
  title: string;
  description?: string;
  priority: string;
  completed: boolean;
  original_date: string;
  task_date: string;
  estimated_duration?: number;
  focus_blocks?: number;
  break_duration?: number;
  interruption_mode?: boolean;
  rollovers?: number;
  tags?: string[];
  category?: string;
  created_at: string;
  updated_at: string;
  completed_at?: string;
  started_at?: string;
  actual_duration_min?: number;
}

interface DeepWorkSubtaskDB {
  id: string;
  task_id: string;
  title: string;
  text: string;
  completed?: boolean;
  priority?: string;
  due_date?: string;
  created_at?: string;
  updated_at?: string;
  completed_at?: string;
  started_at?: string;
  actual_duration_min?: number;
}

export class SupabaseTaskService {
  /**
   * Execute MCP Supabase query using Claude Code's MCP tools
   */
  private async executeMCPQuery(query: string): Promise<any[]> {
    try {
      console.log(`üîç Executing Supabase query: ${query}`);
      
      // Use MCP Supabase execute_sql tool if available
      const { execute_sql } = (globalThis as any).mcp__supabase__ || {};
      
      if (execute_sql) {
        const result = await execute_sql({ query });
        console.log(`‚úÖ Query executed successfully:`, result);
        return result.rows || result || [];
      } else {
        console.warn('‚ö†Ô∏è MCP Supabase tools not available, falling back to mock data');
        return this.getMockDataForQuery(query);
      }
    } catch (error) {
      console.error('‚ùå Failed to execute MCP query:', error);
      console.log('üìÑ Falling back to mock data');
      return this.getMockDataForQuery(query);
    }
  }

  /**
   * Get mock data based on query for fallback
   */
  private getMockDataForQuery(query: string): any[] {
    if (query.includes('light_work_tasks')) {
      return [
        {
          id: 'db-light-1',
          user_id: 'user-123', 
          title: 'Email Processing & Admin Tasks',
          description: 'Handle incoming emails and quick administrative work',
          priority: 'Med',
          completed: false,
          original_date: '2025-09-13',
          task_date: '2025-09-13',
          estimated_duration: 30,
          tags: ['admin', 'email'],
          category: 'Administration',
          created_at: '2025-09-13T10:00:00Z',
          updated_at: '2025-09-13T10:00:00Z'
        },
        {
          id: 'db-light-2',
          user_id: 'user-123',
          title: 'Quick Content Review',
          description: 'Review and approve pending content pieces',
          priority: 'Low',
          completed: true,
          original_date: '2025-09-12',
          task_date: '2025-09-12',
          estimated_duration: 15,
          tags: ['content', 'review'],
          category: 'Content',
          created_at: '2025-09-12T09:00:00Z',
          updated_at: '2025-09-13T11:30:00Z',
          completed_at: '2025-09-13T11:30:00Z'
        }
      ];
    }
    
    if (query.includes('light_work_subtasks')) {
      return [
        {
          id: 'db-light-sub-1',
          task_id: 'db-light-1',
          title: 'Process urgent emails',
          text: 'Clear high-priority emails and respond',
          completed: false,
          priority: 'HIGH',
          created_at: '2025-09-13T10:00:00Z',
          updated_at: '2025-09-13T10:00:00Z'
        },
        {
          id: 'db-light-sub-2', 
          task_id: 'db-light-1',
          title: 'Schedule meetings',
          text: 'Coordinate calendar and send invites',
          completed: false,
          priority: 'Med',
          created_at: '2025-09-13T10:00:00Z',
          updated_at: '2025-09-13T10:00:00Z'
        }
      ];
    }
    
    if (query.includes('deep_work_tasks')) {
      return [
        {
          id: 'db-deep-1',
          user_id: 'user-123',
          title: 'Complete SISO IDE Integration',
          description: 'Finish Supabase integration and test all components',
          priority: 'HIGH',
          completed: false,
          original_date: '2025-09-13',
          task_date: '2025-09-13', 
          estimated_duration: 120,
          focus_blocks: 3,
          break_duration: 15,
          tags: ['development', 'integration'],
          category: 'Development',
          created_at: '2025-09-13T08:00:00Z',
          updated_at: '2025-09-13T08:00:00Z'
        }
      ];
    }
    
    if (query.includes('deep_work_subtasks')) {
      return [
        {
          id: 'db-deep-sub-1',
          task_id: 'db-deep-1',
          title: 'Test Light Work page database connection',
          text: 'Verify all CRUD operations work correctly',
          completed: false,
          priority: 'HIGH',
          created_at: '2025-09-13T08:00:00Z',
          updated_at: '2025-09-13T08:00:00Z'
        },
        {
          id: 'db-deep-sub-2',
          task_id: 'db-deep-1',
          title: 'Test Deep Work page database connection',
          text: 'Ensure status updates persist correctly',
          completed: false,
          priority: 'HIGH', 
          created_at: '2025-09-13T08:00:00Z',
          updated_at: '2025-09-13T08:00:00Z'
        }
      ];
    }
    
    return [];
  }
  /**
   * Map database task to component Task interface
   */
  private mapDBTaskToComponent(dbTask: LightWorkTaskDB | DeepWorkTaskDB, subtasks: Subtask[]): Task {
    // Determine focus intensity based on task type and data
    let focusIntensity: 1 | 2 | 3 | 4 = 2;
    if ('focus_blocks' in dbTask) {
      // Deep work task
      focusIntensity = dbTask.focus_blocks && dbTask.focus_blocks >= 3 ? 4 : 3;
    } else {
      // Light work task  
      focusIntensity = dbTask.estimated_duration && dbTask.estimated_duration > 30 ? 2 : 1;
    }

    return {
      id: dbTask.id,
      title: dbTask.title,
      description: dbTask.description || '',
      status: dbTask.completed ? 'completed' : 'pending',
      priority: this.mapPriority(dbTask.priority),
      level: 0,
      dependencies: [],
      subtasks,
      focusIntensity,
      context: dbTask.category || 'general'
    };
  }

  /**
   * Map database subtask to component Subtask interface
   */
  private mapDBSubtaskToComponent(dbSubtask: LightWorkSubtaskDB | DeepWorkSubtaskDB): Subtask {
    const estimatedTime = dbSubtask.actual_duration_min 
      ? `${dbSubtask.actual_duration_min}min`
      : '15min'; // Default estimate

    return {
      id: dbSubtask.id,
      title: dbSubtask.title,
      description: dbSubtask.text,
      status: dbSubtask.completed ? 'completed' : 'pending',
      priority: this.mapPriority(dbSubtask.priority || 'Med'),
      estimatedTime,
      tools: ['task-manager', 'productivity-app']
    };
  }

  /**
   * Map database priority to component priority
   */
  private mapPriority(dbPriority: string): string {
    const priorityMap: Record<string, string> = {
      'URGENT': 'high',
      'HIGH': 'high',
      'Med': 'medium',
      'MEDIUM': 'medium',
      'LOW': 'low',
      'Low': 'low'
    };
    return priorityMap[dbPriority] || 'medium';
  }

  /**
   * Get Light Work tasks with subtasks
   */
  async getLightWorkTasks(): Promise<Task[]> {
    try {
      console.log('üîÑ Loading light work tasks from Supabase...');
      
      // For now, use the MCP Supabase execute_sql directly (from Claude Code)
      // In production, this would use a proper Supabase client
      const tasksData = await this.executeMCPQuery("SELECT * FROM light_work_tasks ORDER BY created_at DESC LIMIT 10");
      const subtasksData = await this.executeMCPQuery("SELECT * FROM light_work_subtasks ORDER BY created_at DESC");

      // Group subtasks by task_id
      const subtasksByTaskId: Record<string, LightWorkSubtaskDB[]> = {};
      subtasksData.forEach((subtask: LightWorkSubtaskDB) => {
        if (!subtasksByTaskId[subtask.task_id]) {
          subtasksByTaskId[subtask.task_id] = [];
        }
        subtasksByTaskId[subtask.task_id].push(subtask);
      });

      // Map to component format
      const tasks: Task[] = tasksData.map((dbTask: LightWorkTaskDB) => {
        const taskSubtasks = (subtasksByTaskId[dbTask.id] || [])
          .map(subtask => this.mapDBSubtaskToComponent(subtask));
        
        return this.mapDBTaskToComponent(dbTask, taskSubtasks);
      });

      console.log(`‚úÖ Loaded ${tasks.length} light work tasks from Supabase`);
      return tasks;
    } catch (error) {
      console.error('‚ùå Failed to load light work tasks:', error);
      console.log('üìÑ Falling back to mock data for demonstration');
      return this.getMockLightWorkTasks();
    }
  }

  /**
   * Get Deep Work tasks with subtasks
   */
  async getDeepWorkTasks(): Promise<Task[]> {
    try {
      console.log('üîÑ Loading deep work tasks from Supabase...');
      
      // For now, use the MCP Supabase execute_sql directly (from Claude Code)
      // In production, this would use a proper Supabase client
      const tasksData = await this.executeMCPQuery("SELECT * FROM deep_work_tasks ORDER BY created_at DESC LIMIT 10");
      const subtasksData = await this.executeMCPQuery("SELECT * FROM deep_work_subtasks ORDER BY created_at DESC");

      // Group subtasks by task_id
      const subtasksByTaskId: Record<string, DeepWorkSubtaskDB[]> = {};
      subtasksData.forEach((subtask: DeepWorkSubtaskDB) => {
        if (!subtasksByTaskId[subtask.task_id]) {
          subtasksByTaskId[subtask.task_id] = [];
        }
        subtasksByTaskId[subtask.task_id].push(subtask);
      });

      // Map to component format
      const tasks: Task[] = tasksData.map((dbTask: DeepWorkTaskDB) => {
        const taskSubtasks = (subtasksByTaskId[dbTask.id] || [])
          .map(subtask => this.mapDBSubtaskToComponent(subtask));
        
        return this.mapDBTaskToComponent(dbTask, taskSubtasks);
      });

      console.log(`‚úÖ Loaded ${tasks.length} deep work tasks from Supabase`);
      return tasks;
    } catch (error) {
      console.error('‚ùå Failed to load deep work tasks:', error);
      console.log('üìÑ Falling back to mock data for demonstration');
      return this.getMockDeepWorkTasks();
    }
  }

  /**
   * Update task status using MCP Supabase tools
   */
  async updateTaskStatus(taskId: string, completed: boolean, taskType: 'light_work' | 'deep_work'): Promise<void> {
    try {
      console.log(`üîÑ Updating task ${taskId} status to ${completed ? 'completed' : 'pending'}`);
      
      const tableName = taskType === 'light_work' ? 'light_work_tasks' : 'deep_work_tasks';
      const now = new Date().toISOString();
      
      const query = completed
        ? `UPDATE ${tableName} SET completed = true, completed_at = '${now}', updated_at = '${now}' WHERE id = '${taskId}'`
        : `UPDATE ${tableName} SET completed = false, completed_at = NULL, updated_at = '${now}' WHERE id = '${taskId}'`;

      // Use MCP Supabase execute_sql tool directly
      const { execute_sql } = (globalThis as any).mcp__supabase__ || {};
      
      if (execute_sql) {
        await execute_sql({ query });
        console.log(`‚úÖ Updated task ${taskId} status to ${completed ? 'completed' : 'pending'}`);
      } else {
        console.warn('‚ö†Ô∏è MCP Supabase tools not available, skipping database update');
      }
    } catch (error) {
      console.error('‚ùå Failed to update task status:', error);
      // Don't throw error - allow UI to continue functioning
    }
  }

  /**
   * Update subtask status using MCP Supabase tools
   */
  async updateSubtaskStatus(subtaskId: string, completed: boolean, taskType: 'light_work' | 'deep_work'): Promise<void> {
    try {
      console.log(`üîÑ Updating subtask ${subtaskId} status to ${completed ? 'completed' : 'pending'}`);
      
      const tableName = taskType === 'light_work' ? 'light_work_subtasks' : 'deep_work_subtasks';
      const now = new Date().toISOString();
      
      const query = completed
        ? `UPDATE ${tableName} SET completed = true, completed_at = '${now}', updated_at = '${now}' WHERE id = '${subtaskId}'`
        : `UPDATE ${tableName} SET completed = false, completed_at = NULL, updated_at = '${now}' WHERE id = '${subtaskId}'`;

      // Use MCP Supabase execute_sql tool directly
      const { execute_sql } = (globalThis as any).mcp__supabase__ || {};
      
      if (execute_sql) {
        await execute_sql({ query });
        console.log(`‚úÖ Updated subtask ${subtaskId} status to ${completed ? 'completed' : 'pending'}`);
      } else {
        console.warn('‚ö†Ô∏è MCP Supabase tools not available, skipping database update');
      }
    } catch (error) {
      console.error('‚ùå Failed to update subtask status:', error);
      // Don't throw error - allow UI to continue functioning
    }
  }

  /**
   * Fallback mock data for Light Work tasks
   */
  private getMockLightWorkTasks(): Task[] {
    return [
      {
        id: 'lw-mock-1',
        title: 'Quick admin and email processing',
        description: 'Handle incoming emails, admin tasks, and quick communications',
        status: 'in-progress',
        priority: 'medium',
        level: 0,
        dependencies: [],
        focusIntensity: 1,
        context: 'admin',
        subtasks: [
          {
            id: 'lw-mock-1.1',
            title: 'Process inbox and respond to urgent emails',
            description: 'Clear high-priority emails and set up follow-ups',
            status: 'in-progress',
            priority: 'high',
            estimatedTime: '20min',
            tools: ['email-client', 'task-tracker', 'calendar'],
          },
          {
            id: 'lw-mock-1.2',
            title: 'Update project status reports',
            description: 'Quick status updates for ongoing projects',
            status: 'pending',
            priority: 'medium',
            estimatedTime: '15min',
            tools: ['project-manager', 'status-tracker', 'reporting-tool'],
          }
        ]
      }
    ];
  }

  /**
   * Fallback mock data for Deep Work tasks  
   */
  private getMockDeepWorkTasks(): Task[] {
    return [
      {
        id: 'dw-mock-1',
        title: 'SISO IDE Development',
        description: 'Complete development and optimization of the SISO Internal IDE platform',
        status: 'in-progress',
        priority: 'high',
        level: 0,
        dependencies: [],
        focusIntensity: 3,
        context: 'coding',
        subtasks: [
          {
            id: 'dw-mock-1.1',
            title: 'Fix console errors and ReferenceError issues',
            description: 'Resolve JavaScript errors preventing proper IDE functionality',
            status: 'in-progress',
            priority: 'high',
            estimatedTime: '45min',
            tools: ['browser-devtools', 'error-debugger', 'code-assistant'],
          }
        ]
      }
    ];
  }
}

// Export singleton instance
export const supabaseTaskService = new SupabaseTaskService();
export default supabaseTaskService;