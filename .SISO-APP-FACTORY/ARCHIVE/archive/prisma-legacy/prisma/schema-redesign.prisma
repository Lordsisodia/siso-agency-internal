// ðŸŽ¯ SISO-INTERNAL: Clean Database Architecture
// Separates Light Work and Deep Work into distinct tables
// Designed for multi-user support (Tazz, Tours, etc.)

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("PRISMA_DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

// ===== USER MANAGEMENT =====
model User {
  id                     String                   @id @default(cuid())
  supabaseId             String                   @unique
  email                  String                   @unique
  displayName            String?                  // "Tazz", "Tours", etc.
  role                   UserRole                 @default(USER)
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt

  // Work Task Relations - SEPARATED BY TYPE
  lightWorkTasks         LightWorkTask[]
  deepWorkTasks          DeepWorkTask[]
  
  // Other relations (keeping existing)
  personalContext        PersonalContext[]
  automationTasks        AutomationTask[]
  dailyHabits            DailyHabits[]
  dailyHealth            DailyHealth[]
  dailyWorkout           DailyWorkout[]
  dailyRoutine           DailyRoutine[]
  dailyReflections       DailyReflections[]
  timeBlocks             TimeBlock[]
  userProgress           UserProgress[]
  xpBalance              XPBalance[]
  xpPurchases            XPPurchase[]
  xpEarningLog           XPEarningLog[]
  achievements           Achievement[]

  @@map("users")
}

enum UserRole {
  ADMIN
  USER
  TEAM_MEMBER
}

// ===== LIGHT WORK TASKS =====
// For quick, interruption-friendly tasks (emails, calls, admin)
model LightWorkTask {
  id                    String                @id @default(cuid())
  userId                String
  user                  User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Core Task Fields
  title                 String
  description           String?
  priority              Priority              @default(MEDIUM)
  completed             Boolean               @default(false)
  
  // Scheduling
  originalDate          String                // YYYY-MM-DD format
  currentDate           String                // YYYY-MM-DD format (for rollovers)
  estimatedDuration     Int?                  // minutes
  
  // Tracking
  rollovers             Int                   @default(0)
  tags                  String[]              @default([])
  category              String?
  
  // Timestamps
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  completedAt           DateTime?
  startedAt             DateTime?
  
  // Time Tracking
  actualDurationMin     Int?
  timeEstimate          String?               // "15 min", "1 hour", etc.
  
  // AI Fields
  aiAnalyzed            Boolean               @default(false)
  aiReasoning           String?
  analyzedAt            DateTime?
  
  // XP System
  xpReward              Int?
  complexity            Int?
  confidence            Float?
  contextualBonus       Float?
  difficulty            Int?
  learningValue         Int?
  priorityRank          Int?
  strategicImportance   Int?
  timeAccuracy          Float?
  
  // Relations
  subtasks              LightWorkSubtask[]
  
  @@map("light_work_tasks")
}

model LightWorkSubtask {
  id                    String                @id @default(cuid())
  taskId                String
  task                  LightWorkTask         @relation(fields: [taskId], references: [id], onDelete: Cascade)
  
  // Core Fields
  title                 String
  text                  String                // Alternative to title
  completed             Boolean               @default(false)
  priority              String?               // "High", "Med", "Low"
  dueDate               DateTime?
  
  // Timestamps
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  completedAt           DateTime?
  startedAt             DateTime?
  
  // Time Tracking
  actualDurationMin     Int?
  timeAccuracy          Float?
  
  // AI Fields
  aiAnalyzed            Boolean               @default(false)
  aiReasoning           String?
  analyzedAt            DateTime?
  
  // XP System
  xpReward              Int?
  complexity            Int?
  confidence            Float?
  contextualBonus       Float?
  difficulty            Int?
  learningValue         Int?
  priorityRank          Int?
  strategicImportance   Int?
  
  @@map("light_work_subtasks")
}

// ===== DEEP WORK TASKS =====
// For focused, no-interruption work blocks (2-4 hours)
model DeepWorkTask {
  id                    String                @id @default(cuid())
  userId                String
  user                  User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Core Task Fields
  title                 String
  description           String?
  priority              Priority              @default(HIGH)  // Deep work is typically high priority
  completed             Boolean               @default(false)
  
  // Scheduling
  originalDate          String                // YYYY-MM-DD format
  currentDate           String                // YYYY-MM-DD format
  estimatedDuration     Int?                  // minutes (typically 120-240)
  
  // Deep Work Specific
  focusBlocks           Int                   @default(1)     // Number of focus blocks
  breakDuration         Int                   @default(15)    // Break between blocks
  interruptionMode      Boolean               @default(false) // Phone/notifications off
  
  // Tracking
  rollovers             Int                   @default(0)
  tags                  String[]              @default([])
  category              String?
  
  // Timestamps
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  completedAt           DateTime?
  startedAt             DateTime?
  
  // Time Tracking
  actualDurationMin     Int?
  timeEstimate          String?               // "2 hours", "4 hours", etc.
  
  // AI Fields
  aiAnalyzed            Boolean               @default(false)
  aiReasoning           String?
  analyzedAt            DateTime?
  
  // XP System (typically higher rewards)
  xpReward              Int?
  complexity            Int?
  confidence            Float?
  contextualBonus       Float?
  difficulty            Int?
  learningValue         Int?
  priorityRank          Int?
  strategicImportance   Int?
  timeAccuracy          Float?
  
  // Relations
  subtasks              DeepWorkSubtask[]
  
  @@map("deep_work_tasks")
}

model DeepWorkSubtask {
  id                    String                @id @default(cuid())
  taskId                String
  task                  DeepWorkTask          @relation(fields: [taskId], references: [id], onDelete: Cascade)
  
  // Core Fields
  title                 String
  text                  String                // Alternative to title
  completed             Boolean               @default(false)
  priority              String?               // "High", "Med", "Low"
  dueDate               DateTime?
  
  // Deep Work Specific
  requiresFocus         Boolean               @default(true)   // Requires deep focus
  complexityLevel       Int?                  // 1-5 scale
  
  // Timestamps
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  completedAt           DateTime?
  startedAt             DateTime?
  
  // Time Tracking
  actualDurationMin     Int?
  timeAccuracy          Float?
  
  // AI Fields
  aiAnalyzed            Boolean               @default(false)
  aiReasoning           String?
  analyzedAt            DateTime?
  
  // XP System (typically higher rewards)
  xpReward              Int?
  complexity            Int?
  confidence            Float?
  contextualBonus       Float?
  difficulty            Int?
  learningValue         Int?
  priorityRank          Int?
  strategicImportance   Int?
  
  @@map("deep_work_subtasks")
}

// ===== SHARED ENUMS =====
enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// ===== EXISTING MODELS (UNCHANGED) =====
// Keep all existing models for compatibility
model PersonalContext {
  id                    String                @id @default(cuid())
  userId                String
  user                  User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  contextData           Json
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt

  @@map("personal_context")
}

// ... (other existing models remain unchanged for now)
// This allows gradual migration without breaking existing functionality