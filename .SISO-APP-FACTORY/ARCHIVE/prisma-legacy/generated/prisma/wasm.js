
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
Prisma.prismaVersion = {
  client: "6.14.0",
  engine: "717184b7b35ea05dfa71a3236b7af656013e1e49"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  supabaseId: 'supabaseId',
  email: 'email',
  displayName: 'displayName',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LightWorkTaskScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  description: 'description',
  priority: 'priority',
  completed: 'completed',
  originalDate: 'originalDate',
  currentDate: 'currentDate',
  estimatedDuration: 'estimatedDuration',
  rollovers: 'rollovers',
  tags: 'tags',
  category: 'category',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  completedAt: 'completedAt',
  startedAt: 'startedAt',
  actualDurationMin: 'actualDurationMin',
  timeEstimate: 'timeEstimate',
  aiAnalyzed: 'aiAnalyzed',
  aiReasoning: 'aiReasoning',
  analyzedAt: 'analyzedAt',
  xpReward: 'xpReward',
  complexity: 'complexity',
  confidence: 'confidence',
  contextualBonus: 'contextualBonus',
  difficulty: 'difficulty',
  learningValue: 'learningValue',
  priorityRank: 'priorityRank',
  strategicImportance: 'strategicImportance',
  timeAccuracy: 'timeAccuracy'
};

exports.Prisma.LightWorkSubtaskScalarFieldEnum = {
  id: 'id',
  taskId: 'taskId',
  title: 'title',
  text: 'text',
  completed: 'completed',
  priority: 'priority',
  dueDate: 'dueDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  completedAt: 'completedAt',
  startedAt: 'startedAt',
  actualDurationMin: 'actualDurationMin',
  timeAccuracy: 'timeAccuracy',
  aiAnalyzed: 'aiAnalyzed',
  aiReasoning: 'aiReasoning',
  analyzedAt: 'analyzedAt',
  xpReward: 'xpReward',
  complexity: 'complexity',
  confidence: 'confidence',
  contextualBonus: 'contextualBonus',
  difficulty: 'difficulty',
  learningValue: 'learningValue',
  priorityRank: 'priorityRank',
  strategicImportance: 'strategicImportance'
};

exports.Prisma.DeepWorkTaskScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  description: 'description',
  priority: 'priority',
  completed: 'completed',
  originalDate: 'originalDate',
  currentDate: 'currentDate',
  estimatedDuration: 'estimatedDuration',
  focusBlocks: 'focusBlocks',
  breakDuration: 'breakDuration',
  interruptionMode: 'interruptionMode',
  rollovers: 'rollovers',
  tags: 'tags',
  category: 'category',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  completedAt: 'completedAt',
  startedAt: 'startedAt',
  actualDurationMin: 'actualDurationMin',
  timeEstimate: 'timeEstimate',
  aiAnalyzed: 'aiAnalyzed',
  aiReasoning: 'aiReasoning',
  analyzedAt: 'analyzedAt',
  xpReward: 'xpReward',
  complexity: 'complexity',
  confidence: 'confidence',
  contextualBonus: 'contextualBonus',
  difficulty: 'difficulty',
  learningValue: 'learningValue',
  priorityRank: 'priorityRank',
  strategicImportance: 'strategicImportance',
  timeAccuracy: 'timeAccuracy'
};

exports.Prisma.DeepWorkSubtaskScalarFieldEnum = {
  id: 'id',
  taskId: 'taskId',
  title: 'title',
  text: 'text',
  completed: 'completed',
  priority: 'priority',
  dueDate: 'dueDate',
  requiresFocus: 'requiresFocus',
  complexityLevel: 'complexityLevel',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  completedAt: 'completedAt',
  startedAt: 'startedAt',
  actualDurationMin: 'actualDurationMin',
  timeAccuracy: 'timeAccuracy',
  aiAnalyzed: 'aiAnalyzed',
  aiReasoning: 'aiReasoning',
  analyzedAt: 'analyzedAt',
  xpReward: 'xpReward',
  complexity: 'complexity',
  confidence: 'confidence',
  contextualBonus: 'contextualBonus',
  difficulty: 'difficulty',
  learningValue: 'learningValue',
  priorityRank: 'priorityRank',
  strategicImportance: 'strategicImportance'
};

exports.Prisma.AutomationTaskScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  description: 'description',
  category: 'category',
  priority: 'priority',
  status: 'status',
  prompt: 'prompt',
  allowedTools: 'allowedTools',
  estimatedTokens: 'estimatedTokens',
  actualTokens: 'actualTokens',
  executionTimeMs: 'executionTimeMs',
  result: 'result',
  error: 'error',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  startedAt: 'startedAt',
  completedAt: 'completedAt'
};

exports.Prisma.DailyHabitsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  date: 'date',
  screenTimeMinutes: 'screenTimeMinutes',
  bullshitContentMinutes: 'bullshitContentMinutes',
  noWeed: 'noWeed',
  noScrolling: 'noScrolling',
  deepWorkHours: 'deepWorkHours',
  lightWorkHours: 'lightWorkHours',
  habitsData: 'habitsData',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DailyHealthScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  date: 'date',
  healthChecklist: 'healthChecklist',
  meals: 'meals',
  macros: 'macros',
  waterIntakeMl: 'waterIntakeMl',
  milkIntakeMl: 'milkIntakeMl',
  sleepHours: 'sleepHours',
  energyLevel: 'energyLevel',
  moodLevel: 'moodLevel',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DailyWorkoutScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  date: 'date',
  exercises: 'exercises',
  totalExercises: 'totalExercises',
  completedExercises: 'completedExercises',
  completionPercentage: 'completionPercentage',
  durationMinutes: 'durationMinutes',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DailyRoutineScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  date: 'date',
  routineType: 'routineType',
  items: 'items',
  completedCount: 'completedCount',
  totalCount: 'totalCount',
  completionPercentage: 'completionPercentage',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DailyReflectionsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  date: 'date',
  wentWell: 'wentWell',
  evenBetterIf: 'evenBetterIf',
  analysis: 'analysis',
  patterns: 'patterns',
  changes: 'changes',
  overallRating: 'overallRating',
  keyLearnings: 'keyLearnings',
  tomorrowFocus: 'tomorrowFocus',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TimeBlockScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  date: 'date',
  startTime: 'startTime',
  endTime: 'endTime',
  title: 'title',
  description: 'description',
  category: 'category',
  completed: 'completed',
  actualStart: 'actualStart',
  actualEnd: 'actualEnd',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PersonalContextScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  currentGoals: 'currentGoals',
  skillPriorities: 'skillPriorities',
  revenueTargets: 'revenueTargets',
  timeConstraints: 'timeConstraints',
  currentProjects: 'currentProjects',
  hatedTasks: 'hatedTasks',
  valuedTasks: 'valuedTasks',
  learningObjectives: 'learningObjectives',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserProgressScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  currentLevel: 'currentLevel',
  totalXP: 'totalXP',
  dailyXP: 'dailyXP',
  currentStreak: 'currentStreak',
  bestStreak: 'bestStreak',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AchievementScalarFieldEnum = {
  id: 'id',
  progressId: 'progressId',
  name: 'name',
  description: 'description',
  badge: 'badge',
  category: 'category',
  requirement: 'requirement',
  unlocked: 'unlocked',
  progress: 'progress',
  maxProgress: 'maxProgress',
  unlockedAt: 'unlockedAt',
  createdAt: 'createdAt'
};

exports.Prisma.DailyStatsScalarFieldEnum = {
  id: 'id',
  progressId: 'progressId',
  date: 'date',
  totalXP: 'totalXP',
  activitiesCompleted: 'activitiesCompleted',
  streakCount: 'streakCount',
  level: 'level',
  routineXP: 'routineXP',
  taskXP: 'taskXP',
  healthXP: 'healthXP',
  focusXP: 'focusXP',
  habitXP: 'habitXP',
  createdAt: 'createdAt'
};

exports.Prisma.XPBalanceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  currentXP: 'currentXP',
  totalEarned: 'totalEarned',
  totalSpent: 'totalSpent',
  reserveXP: 'reserveXP',
  pendingLoans: 'pendingLoans',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.XPPurchaseScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  rewardId: 'rewardId',
  xpSpent: 'xpSpent',
  actualPrice: 'actualPrice',
  purchaseType: 'purchaseType',
  notes: 'notes',
  satisfactionRating: 'satisfactionRating',
  guiltLevel: 'guiltLevel',
  wasPlanned: 'wasPlanned',
  celebrationLevel: 'celebrationLevel',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.XPEarningLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  source: 'source',
  sourceId: 'sourceId',
  baseXP: 'baseXP',
  finalXP: 'finalXP',
  multipliers: 'multipliers',
  createdAt: 'createdAt'
};

exports.Prisma.RewardDefinitionScalarFieldEnum = {
  id: 'id',
  category: 'category',
  name: 'name',
  description: 'description',
  basePrice: 'basePrice',
  iconEmoji: 'iconEmoji',
  isActive: 'isActive',
  requiresStreak: 'requiresStreak',
  maxDailyUse: 'maxDailyUse',
  availabilityWindow: 'availabilityWindow',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  ADMIN: 'ADMIN',
  USER: 'USER',
  TEAM_MEMBER: 'TEAM_MEMBER'
};

exports.Priority = exports.$Enums.Priority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.AutomationCategory = exports.$Enums.AutomationCategory = {
  DEVELOPMENT: 'DEVELOPMENT',
  TESTING: 'TESTING',
  DEPLOYMENT: 'DEPLOYMENT',
  ANALYSIS: 'ANALYSIS',
  MAINTENANCE: 'MAINTENANCE'
};

exports.AutomationStatus = exports.$Enums.AutomationStatus = {
  PENDING: 'PENDING',
  RUNNING: 'RUNNING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  PAUSED: 'PAUSED'
};

exports.RoutineType = exports.$Enums.RoutineType = {
  MORNING: 'MORNING',
  EVENING: 'EVENING'
};

exports.TimeBlockCategory = exports.$Enums.TimeBlockCategory = {
  DEEP_WORK: 'DEEP_WORK',
  LIGHT_WORK: 'LIGHT_WORK',
  MEETING: 'MEETING',
  BREAK: 'BREAK',
  PERSONAL: 'PERSONAL',
  HEALTH: 'HEALTH',
  LEARNING: 'LEARNING',
  ADMIN: 'ADMIN'
};

exports.AchievementCategory = exports.$Enums.AchievementCategory = {
  STREAK: 'STREAK',
  POINTS: 'POINTS',
  COMPLETION: 'COMPLETION',
  CONSISTENCY: 'CONSISTENCY'
};

exports.Prisma.ModelName = {
  User: 'User',
  LightWorkTask: 'LightWorkTask',
  LightWorkSubtask: 'LightWorkSubtask',
  DeepWorkTask: 'DeepWorkTask',
  DeepWorkSubtask: 'DeepWorkSubtask',
  AutomationTask: 'AutomationTask',
  DailyHabits: 'DailyHabits',
  DailyHealth: 'DailyHealth',
  DailyWorkout: 'DailyWorkout',
  DailyRoutine: 'DailyRoutine',
  DailyReflections: 'DailyReflections',
  TimeBlock: 'TimeBlock',
  PersonalContext: 'PersonalContext',
  UserProgress: 'UserProgress',
  Achievement: 'Achievement',
  DailyStats: 'DailyStats',
  XPBalance: 'XPBalance',
  XPPurchase: 'XPPurchase',
  XPEarningLog: 'XPEarningLog',
  RewardDefinition: 'RewardDefinition'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
