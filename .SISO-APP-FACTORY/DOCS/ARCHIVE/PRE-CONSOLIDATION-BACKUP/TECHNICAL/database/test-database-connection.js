/**
 * Test database connectivity with real Prisma client
 */

async function testDatabaseConnection() {
  try {
    // Using SQLite for development
    console.log('üîç Testing SQLite database connection...');
    console.log('Database: ./prisma/dev.db');
    
    // Import the generated Prisma client (ES modules)
    const { PrismaClient } = await import('./generated/prisma/index.js');
    
    const prisma = new PrismaClient({
      log: ['error', 'warn', 'info'],
    });
    
    console.log('‚úÖ Prisma client created');
    
    // Test connection
    await prisma.$connect();
    console.log('‚úÖ Connected to database');
    
    // Test simple query
    const result = await prisma.$queryRaw`SELECT 1 as test`;
    console.log('‚úÖ Query test successful:', result);
    
    // Test schema - check if tables exist
    try {
      const userCount = await prisma.user.count();
      console.log('‚úÖ User table accessible, count:', userCount);
    } catch (error) {
      console.log('‚ö†Ô∏è User table test failed:', error.message);
    }
    
    try {
      const taskCount = await prisma.personalTask.count();
      console.log('‚úÖ PersonalTask table accessible, count:', taskCount);
    } catch (error) {
      console.log('‚ö†Ô∏è PersonalTask table test failed:', error.message);
    }
    
    await prisma.$disconnect();
    console.log('‚úÖ Disconnected successfully');
    
    console.log('\nüéâ Database connection test PASSED!');
    
  } catch (error) {
    console.error('‚ùå Database connection test FAILED:', error);
    console.error('Error details:', error.message);
    
    if (error.code === 'ECONNREFUSED') {
      console.log('\nüí° SOLUTION: Start PostgreSQL server or use a hosted database:');
      console.log('  ‚Ä¢ Local: brew install postgresql && brew services start postgresql');
      console.log('  ‚Ä¢ Hosted: Use Supabase, Neon, or PlanetScale');
      console.log('  ‚Ä¢ Alternative: Switch to SQLite for development');
    }
    
    process.exit(1);
  }
}

testDatabaseConnection();