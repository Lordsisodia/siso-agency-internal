# XP Store Schema Extension - SAFE TO ADD
# These models extend the existing gamification without breaking current functionality

# Add these models to your main schema.prisma file

model XPBalance {
  id            String    @id @default(cuid())
  userId        String    @unique
  currentXP     Int       @default(0)
  totalEarned   Int       @default(0)
  totalSpent    Int       @default(0)
  reserveXP     Int       @default(200)      # Emergency fund
  pendingLoans  Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  # Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  purchases     XPPurchase[]
  loans         XPLoan[]
  
  @@index([userId])
  @@map("xp_balances")
}

model RewardDefinition {
  id                 String         @id @default(cuid())
  category           RewardCategory
  name               String
  description        String
  basePrice          Int
  iconEmoji          String         @default("üéÅ")
  
  # Availability rules
  isActive           Boolean        @default(true)
  requiredStreak     Int?           # Minimum streak to unlock
  maxDailyUse        Int?           # Daily purchase limit
  availabilityWindow String?        # "weekdays_only", "weekends_only", etc.
  
  # Dynamic pricing
  demandMultiplier   Float          @default(1.0)
  seasonalMultiplier Float          @default(1.0)
  
  # Metadata
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  
  # Relations
  purchases          XPPurchase[]
  
  @@index([category, isActive])
  @@map("reward_definitions")
}

model XPPurchase {
  id                String            @id @default(cuid())
  userId            String
  balanceId         String
  
  # Reward details
  rewardType        RewardCategory
  rewardName        String
  rewardDescription String?
  
  # Pricing
  xpCost            Int               # Original cost
  originalPrice     Int               # Base price before adjustments
  actualPrice       Int               # Final price paid
  
  # Purchase details
  purchasedAt       DateTime          @default(now())
  consumed          Boolean           @default(false)
  consumedAt        DateTime?
  satisfaction      Int?              # 1-10 rating after consumption
  usageNotes        String?
  
  # Loan system
  isLoan            Boolean           @default(false)
  loanId            String?
  
  # Relations
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  balance           XPBalance         @relation(fields: [balanceId], references: [id])
  rewardDef         RewardDefinition? @relation(fields: [rewardType], references: [category])
  loan              XPLoan?           @relation(fields: [loanId], references: [id])
  
  @@index([userId, purchasedAt])
  @@index([userId, rewardType])
  @@index([userId, consumed])
  @@map("xp_purchases")
}

model XPLoan {
  id           String     @id @default(cuid())
  userId       String
  balanceId    String
  
  # Loan details
  amount       Int        # Original loan amount
  interestRate Float      # Interest rate (0.2 = 20%)
  totalOwed    Int        # Amount + interest
  paidAmount   Int        @default(0)
  
  # Timeline
  createdAt    DateTime   @default(now())
  dueDate      DateTime
  repaidAt     DateTime?
  status       LoanStatus @default(ACTIVE)
  
  # Penalties
  defaultedAt  DateTime?
  penaltyType  PenaltyType?
  penaltyApplied Boolean   @default(false)
  
  # Relations
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  balance      XPBalance  @relation(fields: [balanceId], references: [id])
  purchases    XPPurchase[]
  
  @@index([userId, status])
  @@index([dueDate, status])
  @@map("xp_loans")
}

model XPTransaction {
  id            String            @id @default(cuid())
  userId        String
  balanceId     String
  
  # Transaction details
  type          TransactionType
  amount        Int
  description   String
  metadata      Json              @default("{}")
  
  # Source tracking
  sourceType    String?           # "task_completion", "bonus", "purchase", "loan_repay"
  sourceId      String?           # ID of the source record
  
  createdAt     DateTime          @default(now())
  
  # Relations
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  balance       XPBalance         @relation(fields: [balanceId], references: [id])
  
  @@index([userId, createdAt])
  @@index([userId, type])
  @@map("xp_transactions")
}

model SpendingAnalytics {
  id               String         @id @default(cuid())
  userId           String
  
  # Time period
  periodStart      DateTime
  periodEnd        DateTime
  periodType       String         # "daily", "weekly", "monthly"
  
  # Spending metrics
  totalSpent       Int
  purchaseCount    Int
  avgSatisfaction  Float?
  topCategory      RewardCategory?
  
  # Behavioral insights
  impulsePurchases Int            @default(0)  # Purchases within 5min of earning
  planedPurchases  Int            @default(0)  # Purchases after saving
  
  # Balance insights
  avgBalance       Int
  minBalance       Int
  maxBalance       Int
  
  createdAt        DateTime       @default(now())
  
  # Relations
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, periodStart, periodType])
  @@index([userId, periodType])
  @@map("spending_analytics")
}

# Enums for XP Store
enum RewardCategory {
  CANNABIS
  TIME_OFF
  FOOD
  ENTERTAINMENT
  LUXURY_PURCHASE
  SOCIAL_ACTIVITY
  SUBSCRIPTION
}

enum LoanStatus {
  ACTIVE
  REPAID
  DEFAULTED
  FORGIVEN
}

enum PenaltyType {
  STREAK_RESET
  XP_REDUCTION
  REWARD_RESTRICTION
  PRICE_INCREASE
}

enum TransactionType {
  EARN
  SPEND
  LOAN
  REPAY
  BONUS
  PENALTY
  ADJUSTMENT
}

# Add these relations to existing User model:
# xpBalance        XPBalance?
# xpPurchases      XPPurchase[]
# xpLoans          XPLoan[]
# xpTransactions   XPTransaction[]
# spendingAnalytics SpendingAnalytics[]