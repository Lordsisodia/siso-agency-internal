generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("VITE_PRISMA_DATABASE_URL")
  directUrl = env("VITE_PRISMA_ACCELERATE_URL")
}

model User {
  id                 String                   @id @default(cuid())
  supabaseId         String                   @unique
  email              String                   @unique
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  automationTasks    AutomationTask[]
  dailyHabits        DailyHabits[]
  dailyHealth        DailyHealth[]
  dailyReflections   DailyReflections[]
  dailyRoutines      DailyRoutine[]
  dailyWorkouts      DailyWorkout[]
  eisenhowerAnalysis EisenhowerAnalysis[]
  personalTasks      PersonalTask[]
  timeBlocks         TimeBlock[]
  gamification       UserProgress?
  voiceHistory       VoiceProcessingHistory[]
  personalContext    PersonalContext?

  @@map("users")
}

model PersonalTask {
  id                 String              @id @default(cuid())
  userId             String
  title              String
  description        String?
  workType           WorkType
  priority           Priority
  completed          Boolean             @default(false)
  originalDate       String
  currentDate        String
  estimatedDuration  Int?
  timeEstimate       String?             // "30 min", "2 hours", etc.
  rollovers          Int                 @default(0)
  tags               String[]
  category           String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  completedAt        DateTime?
  
  // AI XP Analysis Fields
  xpReward           Int?                // AI-calculated XP reward
  difficulty         TaskDifficulty?     // AI-assessed difficulty
  aiAnalyzed         Boolean             @default(false)
  aiReasoning        String?             // AI's reasoning for XP allocation
  priorityRank       Int?                // 1-5 AI ranking
  contextualBonus    Int?                // Extra XP based on context
  complexity         Int?                // 1-10 complexity score
  learningValue      Int?                // 1-10 learning potential
  strategicImportance Int?               // 1-10 strategic value
  confidence         Float?              // 0-1 AI confidence score
  analyzedAt         DateTime?           // When AI analysis was done
  
  eisenhowerAnalysis EisenhowerAnalysis?
  subtasks           PersonalSubtask[]
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, currentDate])
  @@index([userId, completed])
  @@index([userId, workType])
  @@index([userId, aiAnalyzed])
  @@map("personal_tasks")
}

model PersonalSubtask {
  id        String       @id @default(cuid())
  taskId    String
  title     String
  completed Boolean      @default(false)
  workType  WorkType
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  completedAt DateTime?
  
  // AI XP Analysis Fields
  xpReward           Int?                // AI-calculated XP reward
  difficulty         TaskDifficulty?     // AI-assessed difficulty
  aiAnalyzed         Boolean             @default(false)
  aiReasoning        String?             // AI's reasoning for XP allocation
  priorityRank       Int?                // 1-5 AI ranking
  contextualBonus    Int?                // Extra XP based on context
  complexity         Int?                // 1-10 complexity score
  learningValue      Int?                // 1-10 learning potential
  strategicImportance Int?               // 1-10 strategic value
  confidence         Float?              // 0-1 AI confidence score
  analyzedAt         DateTime?           // When AI analysis was done
  
  task      PersonalTask @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId, completed])
  @@index([taskId, aiAnalyzed])
  @@map("personal_subtasks")
}

model PersonalContext {
  id                 String   @id @default(cuid())
  userId             String   @unique
  currentGoals       String?
  skillPriorities    String?
  revenueTargets     String?
  timeConstraints    String?
  currentProjects    String?
  hatedTasks         String?
  valuedTasks        String?
  learningObjectives String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("personal_contexts")
}

model EisenhowerAnalysis {
  id               String             @id @default(cuid())
  userId           String
  taskId           String             @unique
  quadrant         EisenhowerQuadrant
  urgentScore      Int
  importanceScore  Int
  reasoning        String
  recommendations  String[]
  originalPosition Int?
  analyzedAt       DateTime           @default(now())
  task             PersonalTask       @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, quadrant])
  @@map("eisenhower_analysis")
}

model VoiceProcessingHistory {
  id               String   @id @default(cuid())
  userId           String
  originalText     String
  processedAt      DateTime @default(now())
  success          Boolean
  totalTasks       Int      @default(0)
  deepTasks        Int      @default(0)
  lightTasks       Int      @default(0)
  errorMessage     String?
  processingTimeMs Int?
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, processedAt])
  @@index([userId, success])
  @@map("voice_processing_history")
}

model UserProgress {
  id            String        @id @default(cuid())
  userId        String        @unique
  currentLevel  Int           @default(1)
  totalXP       Int           @default(0)
  dailyXP       Int           @default(0)
  currentStreak Int           @default(0)
  bestStreak    Int           @default(0)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  achievements  Achievement[]
  dailyStats    DailyStats[]
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_progress")
}

model Achievement {
  id           String              @id @default(cuid())
  progressId   String
  name         String
  description  String
  badge        String
  category     AchievementCategory
  requirement  Int
  unlocked     Boolean             @default(false)
  progress     Int                 @default(0)
  maxProgress  Int
  unlockedAt   DateTime?
  createdAt    DateTime            @default(now())
  userProgress UserProgress        @relation(fields: [progressId], references: [id], onDelete: Cascade)

  @@index([progressId, unlocked])
  @@map("achievements")
}

model DailyStats {
  id                  String       @id @default(cuid())
  progressId          String
  date                String
  totalXP             Int          @default(0)
  activitiesCompleted Int          @default(0)
  streakCount         Int          @default(0)
  level               Int          @default(1)
  routineXP           Int          @default(0)
  taskXP              Int          @default(0)
  healthXP            Int          @default(0)
  focusXP             Int          @default(0)
  habitXP             Int          @default(0)
  createdAt           DateTime     @default(now())
  userProgress        UserProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)

  @@unique([progressId, date])
  @@index([progressId, date])
  @@map("daily_stats")
}

model AutomationTask {
  id              String             @id @default(cuid())
  userId          String
  name            String
  description     String?
  category        AutomationCategory
  priority        Priority
  status          AutomationStatus   @default(PENDING)
  prompt          String
  allowedTools    Json               @default("[]")
  estimatedTokens Int                @default(0)
  actualTokens    Int?
  executionTimeMs Int?
  result          String?
  error           String?
  metadata        Json               @default("{}")
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  startedAt       DateTime?
  completedAt     DateTime?
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
  @@index([userId, category])
  @@map("automation_tasks")
}

model DailyRoutine {
  id                   String      @id @default(cuid())
  userId               String
  date                 String
  routineType          RoutineType
  items                Json        @default("[]")
  completedCount       Int         @default(0)
  totalCount           Int         @default(0)
  completionPercentage Float       @default(0)
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  user                 User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date, routineType])
  @@index([userId, date])
  @@map("daily_routines")
}

model DailyHealth {
  id              String   @id @default(cuid())
  userId          String
  date            String
  healthChecklist Json     @default("[]")
  meals           Json     @default("{}")
  macros          Json     @default("{}")
  waterIntakeMl   Int      @default(0)
  milkIntakeMl    Int      @default(0)
  sleepHours      Float    @default(0)
  energyLevel     Int?
  moodLevel       Int?
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@index([userId, date])
  @@map("daily_health")
}

model DailyWorkout {
  id                   String   @id @default(cuid())
  userId               String
  date                 String
  exercises            Json     @default("[]")
  totalExercises       Int      @default(0)
  completedExercises   Int      @default(0)
  completionPercentage Float    @default(0)
  durationMinutes      Int?
  notes                String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@index([userId, date])
  @@map("daily_workouts")
}

model DailyHabits {
  id                     String   @id @default(cuid())
  userId                 String
  date                   String
  screenTimeMinutes      Int      @default(0)
  bullshitContentMinutes Int      @default(0)
  noWeed                 Boolean  @default(false)
  noScrolling            Boolean  @default(false)
  deepWorkHours          Float    @default(0)
  lightWorkHours         Float    @default(0)
  habitsData             Json     @default("{}")
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@index([userId, date])
  @@map("daily_habits")
}

model DailyReflections {
  id            String   @id @default(cuid())
  userId        String
  date          String
  wentWell      String[]
  evenBetterIf  String[]
  analysis      String[]
  patterns      String[]
  changes       String[]
  overallRating Int?
  keyLearnings  String?
  tomorrowFocus String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@index([userId, date])
  @@map("daily_reflections")
}

model TimeBlock {
  id          String            @id @default(cuid())
  userId      String
  date        String
  startTime   String
  endTime     String
  title       String
  description String?
  category    TimeBlockCategory
  completed   Boolean           @default(false)
  actualStart String?
  actualEnd   String?
  notes       String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, date])
  @@index([userId, date, startTime])
  @@map("time_blocks")
}

enum WorkType {
  DEEP
  LIGHT
  MORNING
}

enum TaskDifficulty {
  TRIVIAL
  EASY
  MODERATE
  HARD
  EXPERT
}

enum Priority {
  CRITICAL
  URGENT
  HIGH
  MEDIUM
  LOW
}

enum EisenhowerQuadrant {
  DO_FIRST
  SCHEDULE
  DELEGATE
  ELIMINATE
}

enum AchievementCategory {
  STREAK
  POINTS
  COMPLETION
  CONSISTENCY
}

enum AutomationCategory {
  DEVELOPMENT
  TESTING
  DEPLOYMENT
  ANALYSIS
  MAINTENANCE
}

enum AutomationStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  PAUSED
}

enum RoutineType {
  MORNING
  EVENING
}

enum TimeBlockCategory {
  DEEP_WORK
  LIGHT_WORK
  MEETING
  BREAK
  PERSONAL
  HEALTH
  LEARNING
  ADMIN
}
