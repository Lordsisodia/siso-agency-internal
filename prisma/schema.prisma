// SISO-INTERNAL Hybrid Database Schema
// Prisma for data + Supabase for authentication
// Zero cold starts with enterprise performance

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("VITE_PRISMA_DATABASE_URL")
  directUrl = env("VITE_PRISMA_ACCELERATE_URL")
}

// ==========================================
// USER DATA BRIDGE (connects to Clerk auth)
// ==========================================

model User {
  id         String   @id @default(cuid())
  clerkId    String   @unique // Links to Clerk user.id
  email      String   @unique
  firstName  String?
  lastName   String?
  imageUrl   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations to all data tables
  personalTasks      PersonalTask[]
  voiceHistory       VoiceProcessingHistory[]
  eisenhowerAnalysis EisenhowerAnalysis[]
  gamification       UserProgress?
  automationTasks    AutomationTask[]
  dailyRoutines      DailyRoutine[]
  dailyHealth        DailyHealth[]
  dailyWorkouts      DailyWorkout[]
  dailyHabits        DailyHabits[]
  dailyReflections   DailyReflections[]
  timeBlocks         TimeBlock[]

  @@map("users")
}

// ==========================================
// PERSONAL TASK MANAGEMENT SYSTEM
// ==========================================

model PersonalTask {
  id                String   @id @default(cuid())
  userId            String
  title             String
  description       String?
  workType          WorkType
  priority          Priority
  completed         Boolean  @default(false)
  originalDate      String // YYYY-MM-DD when first created
  currentDate       String // YYYY-MM-DD current assignment
  estimatedDuration Int? // minutes
  rollovers         Int      @default(0)
  tags              String[] // Array of string tags
  category          String?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?

  // Relations
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  subtasks           PersonalSubtask[]
  eisenhowerAnalysis EisenhowerAnalysis?

  @@index([userId, currentDate])
  @@index([userId, completed])
  @@index([userId, workType])
  @@map("personal_tasks")
}

model PersonalSubtask {
  id        String   @id @default(cuid())
  taskId    String
  title     String
  completed Boolean  @default(false)
  workType  WorkType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  task PersonalTask @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("personal_subtasks")
}

// ==========================================
// EISENHOWER MATRIX AI ORGANIZATION
// ==========================================

model EisenhowerAnalysis {
  id               String             @id @default(cuid())
  userId           String
  taskId           String             @unique
  quadrant         EisenhowerQuadrant
  urgentScore      Int // 1-10 scale
  importanceScore  Int // 1-10 scale  
  reasoning        String             @db.Text
  recommendations  String[] // Array of AI recommendations
  originalPosition Int? // Original order before organization

  analyzedAt DateTime @default(now())

  user User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  task PersonalTask @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([userId, quadrant])
  @@map("eisenhower_analysis")
}

// ==========================================
// VOICE PROCESSING & AI THOUGHT DUMPS
// ==========================================

model VoiceProcessingHistory {
  id               String   @id @default(cuid())
  userId           String
  originalText     String   @db.Text
  processedAt      DateTime @default(now())
  success          Boolean
  totalTasks       Int      @default(0)
  deepTasks        Int      @default(0)
  lightTasks       Int      @default(0)
  errorMessage     String?  @db.Text
  processingTimeMs Int? // How long it took to process

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, processedAt])
  @@index([userId, success])
  @@map("voice_processing_history")
}

// ==========================================
// GAMIFICATION & XP SYSTEM  
// ==========================================

model UserProgress {
  id            String @id @default(cuid())
  userId        String @unique
  currentLevel  Int    @default(1)
  totalXP       Int    @default(0)
  dailyXP       Int    @default(0)
  currentStreak Int    @default(0)
  bestStreak    Int    @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievements Achievement[]
  dailyStats   DailyStats[]

  @@map("user_progress")
}

model Achievement {
  id          String              @id @default(cuid())
  progressId  String
  name        String
  description String              @db.Text
  badge       String // Emoji or icon identifier
  category    AchievementCategory
  requirement Int // Points needed or streak target
  unlocked    Boolean             @default(false)
  progress    Int                 @default(0)
  maxProgress Int

  unlockedAt DateTime?
  createdAt  DateTime  @default(now())

  userProgress UserProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)

  @@index([progressId, unlocked])
  @@map("achievements")
}

model DailyStats {
  id                  String @id @default(cuid())
  progressId          String
  date                String // YYYY-MM-DD
  totalXP             Int    @default(0)
  activitiesCompleted Int    @default(0)
  streakCount         Int    @default(0)
  level               Int    @default(1)

  // XP Category Breakdown
  routineXP Int @default(0)
  taskXP    Int @default(0)
  healthXP  Int @default(0)
  focusXP   Int @default(0)
  habitXP   Int @default(0)

  createdAt DateTime @default(now())

  userProgress UserProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)

  @@unique([progressId, date])
  @@index([progressId, date])
  @@map("daily_stats")
}

// ==========================================
// AUTOMATION TASK SYSTEM
// ==========================================

model AutomationTask {
  id              String             @id @default(cuid())
  userId          String
  name            String
  description     String?            @db.Text
  category        AutomationCategory
  priority        Priority
  status          AutomationStatus   @default(PENDING)
  prompt          String             @db.Text
  allowedTools    Json               @default("[]") // JSON array of tool names
  estimatedTokens Int                @default(0)
  actualTokens    Int?
  executionTimeMs Int?
  result          String?            @db.Text
  error           String?            @db.Text
  metadata        Json               @default("{}")

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  startedAt   DateTime?
  completedAt DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
  @@index([userId, category])
  @@map("automation_tasks")
}

// ==========================================
// LIFE LOCK DAILY ROUTINES SYSTEM
// ==========================================

model DailyRoutine {
  id                   String      @id @default(cuid())
  userId               String
  date                 String // YYYY-MM-DD
  routineType          RoutineType
  items                Json        @default("[]") // Array of DailyRoutineItem
  completedCount       Int         @default(0)
  totalCount           Int         @default(0)
  completionPercentage Float       @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date, routineType])
  @@index([userId, date])
  @@map("daily_routines")
}

// ==========================================
// HEALTH & WELLNESS TRACKING
// ==========================================

model DailyHealth {
  id              String  @id @default(cuid())
  userId          String
  date            String // YYYY-MM-DD
  healthChecklist Json    @default("[]") // Array of HealthItem
  meals           Json    @default("{}") // Meals object
  macros          Json    @default("{}") // Macros object
  waterIntakeMl   Int     @default(0)
  milkIntakeMl    Int     @default(0)
  sleepHours      Float   @default(0)
  energyLevel     Int? // 1-10 scale
  moodLevel       Int? // 1-10 scale
  notes           String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@index([userId, date])
  @@map("daily_health")
}

// ==========================================
// WORKOUT & EXERCISE TRACKING
// ==========================================

model DailyWorkout {
  id                   String  @id @default(cuid())
  userId               String
  date                 String // YYYY-MM-DD
  exercises            Json    @default("[]") // Array of WorkoutExercise
  totalExercises       Int     @default(0)
  completedExercises   Int     @default(0)
  completionPercentage Float   @default(0)
  durationMinutes      Int?
  notes                String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@index([userId, date])
  @@map("daily_workouts")
}

// ==========================================
// HABITS & BEHAVIORAL TRACKING  
// ==========================================

model DailyHabits {
  id                     String  @id @default(cuid())
  userId                 String
  date                   String // YYYY-MM-DD
  screenTimeMinutes      Int     @default(0)
  bullshitContentMinutes Int     @default(0)
  noWeed                 Boolean @default(false)
  noScrolling            Boolean @default(false)
  deepWorkHours          Float   @default(0)
  lightWorkHours         Float   @default(0)
  habitsData             Json    @default("{}") // Custom habits tracking

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@index([userId, date])
  @@map("daily_habits")
}

// ==========================================
// DAILY REFLECTIONS & ANALYSIS
// ==========================================

model DailyReflections {
  id            String   @id @default(cuid())
  userId        String
  date          String // YYYY-MM-DD
  wentWell      String[] // What went well today
  evenBetterIf  String[] // Would be even better if
  analysis      String[] // Analysis points
  patterns      String[] // Observed patterns
  changes       String[] // Changes to make
  overallRating Int? // 1-10 rating of the day
  keyLearnings  String?  @db.Text
  tomorrowFocus String?  @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@index([userId, date])
  @@map("daily_reflections")
}

// ==========================================
// TIME BLOCKING & CALENDAR SYSTEM
// ==========================================

model TimeBlock {
  id          String            @id @default(cuid())
  userId      String
  date        String // YYYY-MM-DD
  startTime   String // HH:MM format
  endTime     String // HH:MM format
  title       String
  description String?           @db.Text
  category    TimeBlockCategory
  completed   Boolean           @default(false)
  actualStart String? // HH:MM format
  actualEnd   String? // HH:MM format
  notes       String?           @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, date])
  @@index([userId, date, startTime])
  @@map("time_blocks")
}

// ==========================================
// ENUMS
// ==========================================

enum WorkType {
  DEEP
  LIGHT
}

enum Priority {
  CRITICAL
  URGENT
  HIGH
  MEDIUM
  LOW
}

enum EisenhowerQuadrant {
  DO_FIRST // Q1: Urgent + Important
  SCHEDULE // Q2: Important + Not Urgent
  DELEGATE // Q3: Urgent + Not Important
  ELIMINATE // Q4: Not Urgent + Not Important
}

enum AchievementCategory {
  STREAK
  POINTS
  COMPLETION
  CONSISTENCY
}

enum AutomationCategory {
  DEVELOPMENT
  TESTING
  DEPLOYMENT
  ANALYSIS
  MAINTENANCE
}

enum AutomationStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  PAUSED
}

enum RoutineType {
  MORNING
  EVENING
}

enum TimeBlockCategory {
  DEEP_WORK
  LIGHT_WORK
  MEETING
  BREAK
  PERSONAL
  HEALTH
  LEARNING
  ADMIN
}
