generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("PRISMA_DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

model User {
  id                     String                   @id @default(cuid())
  supabaseId             String                   @unique
  email                  String                   @unique
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  automationTasks        AutomationTask[]
  dailyHabits            DailyHabits[]
  dailyHealth            DailyHealth[]
  dailyReflections       DailyReflections[]
  dailyRoutines          DailyRoutine[]
  dailyWorkouts          DailyWorkout[]
  eisenhowerAnalysis     EisenhowerAnalysis[]
  morningRoutineTracking MorningRoutineTracking[]
  personalContext        PersonalContext?
  personalTasks          PersonalTask[]
  timeBlocks             TimeBlock[]
  gamification           UserProgress?
  voiceHistory           VoiceProcessingHistory[]
  xpBalance              XPBalance?
  xpEarningLog           XPEarningLog[]
  xpLoans                XPLoan[]                 @relation("UserLoans")
  xpPurchases            XPPurchase[]             @relation("UserPurchases")

  @@map("users")
}

model PersonalTask {
  id                  String              @id @default(cuid())
  userId              String
  title               String
  description         String?
  workType            WorkType
  priority            Priority
  completed           Boolean             @default(false)
  originalDate        String
  currentDate         String
  estimatedDuration   Int?
  rollovers           Int                 @default(0)
  tags                String[]
  category            String?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  completedAt         DateTime?
  aiAnalyzed          Boolean             @default(false)
  aiReasoning         String?
  analyzedAt          DateTime?
  complexity          Int?
  confidence          Float?
  contextualBonus     Int?
  difficulty          TaskDifficulty?
  learningValue       Int?
  priorityRank        Int?
  strategicImportance Int?
  timeEstimate        String?
  xpReward            Int?
  actualDurationMin   Int?
  aiTimeEstimateML    Int?
  aiTimeEstimateMax   Int?
  aiTimeEstimateMin   Int?
  startedAt           DateTime?
  timeAccuracy        Float?
  eisenhowerAnalysis  EisenhowerAnalysis?
  subtasks            PersonalSubtask[]
  user                User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, currentDate])
  @@index([userId, completed])
  @@index([userId, workType])
  @@index([userId, aiAnalyzed])
  @@map("personal_tasks")
}

model PersonalSubtask {
  id                  String          @id @default(cuid())
  taskId              String
  title               String
  completed           Boolean         @default(false)
  workType            WorkType
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  aiAnalyzed          Boolean         @default(false)
  aiReasoning         String?
  analyzedAt          DateTime?
  completedAt         DateTime?
  complexity          Int?
  confidence          Float?
  contextualBonus     Int?
  difficulty          TaskDifficulty?
  learningValue       Int?
  priorityRank        Int?
  strategicImportance Int?
  xpReward            Int?
  actualDurationMin   Int?
  aiTimeEstimateML    Int?
  aiTimeEstimateMax   Int?
  aiTimeEstimateMin   Int?
  startedAt           DateTime?
  timeAccuracy        Float?
  task                PersonalTask    @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId, completed])
  @@index([taskId, aiAnalyzed])
  @@map("personal_subtasks")
}

model PersonalContext {
  id                 String   @id @default(cuid())
  userId             String   @unique
  currentGoals       String?
  skillPriorities    String?
  revenueTargets     String?
  timeConstraints    String?
  currentProjects    String?
  hatedTasks         String?
  valuedTasks        String?
  learningObjectives String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("personal_contexts")
}

model EisenhowerAnalysis {
  id               String             @id @default(cuid())
  userId           String
  taskId           String             @unique
  quadrant         EisenhowerQuadrant
  urgentScore      Int
  importanceScore  Int
  reasoning        String
  recommendations  String[]
  originalPosition Int?
  analyzedAt       DateTime           @default(now())
  task             PersonalTask       @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, quadrant])
  @@map("eisenhower_analysis")
}

model VoiceProcessingHistory {
  id               String   @id @default(cuid())
  userId           String
  originalText     String
  processedAt      DateTime @default(now())
  success          Boolean
  totalTasks       Int      @default(0)
  deepTasks        Int      @default(0)
  lightTasks       Int      @default(0)
  errorMessage     String?
  processingTimeMs Int?
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, processedAt])
  @@index([userId, success])
  @@map("voice_processing_history")
}

model UserProgress {
  id            String        @id @default(cuid())
  userId        String        @unique
  currentLevel  Int           @default(1)
  totalXP       Int           @default(0)
  dailyXP       Int           @default(0)
  currentStreak Int           @default(0)
  bestStreak    Int           @default(0)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  achievements  Achievement[]
  dailyStats    DailyStats[]
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_progress")
}

model Achievement {
  id           String              @id @default(cuid())
  progressId   String
  name         String
  description  String
  badge        String
  category     AchievementCategory
  requirement  Int
  unlocked     Boolean             @default(false)
  progress     Int                 @default(0)
  maxProgress  Int
  unlockedAt   DateTime?
  createdAt    DateTime            @default(now())
  userProgress UserProgress        @relation(fields: [progressId], references: [id], onDelete: Cascade)

  @@index([progressId, unlocked])
  @@map("achievements")
}

model DailyStats {
  id                  String       @id @default(cuid())
  progressId          String
  date                String
  totalXP             Int          @default(0)
  activitiesCompleted Int          @default(0)
  streakCount         Int          @default(0)
  level               Int          @default(1)
  routineXP           Int          @default(0)
  taskXP              Int          @default(0)
  healthXP            Int          @default(0)
  focusXP             Int          @default(0)
  habitXP             Int          @default(0)
  createdAt           DateTime     @default(now())
  userProgress        UserProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)

  @@unique([progressId, date])
  @@index([progressId, date])
  @@map("daily_stats")
}

model AutomationTask {
  id              String             @id @default(cuid())
  userId          String
  name            String
  description     String?
  category        AutomationCategory
  priority        Priority
  status          AutomationStatus   @default(PENDING)
  prompt          String
  allowedTools    Json               @default("[]")
  estimatedTokens Int                @default(0)
  actualTokens    Int?
  executionTimeMs Int?
  result          String?
  error           String?
  metadata        Json               @default("{}")
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  startedAt       DateTime?
  completedAt     DateTime?
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
  @@index([userId, category])
  @@map("automation_tasks")
}

model DailyRoutine {
  id                   String      @id @default(cuid())
  userId               String
  date                 String
  routineType          RoutineType
  items                Json        @default("[]")
  completedCount       Int         @default(0)
  totalCount           Int         @default(0)
  completionPercentage Float       @default(0)
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  user                 User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date, routineType])
  @@index([userId, date])
  @@map("daily_routines")
}

model DailyHealth {
  id              String   @id @default(cuid())
  userId          String
  date            String
  healthChecklist Json     @default("[]")
  meals           Json     @default("{}")
  macros          Json     @default("{}")
  waterIntakeMl   Int      @default(0)
  milkIntakeMl    Int      @default(0)
  sleepHours      Float    @default(0)
  energyLevel     Int?
  moodLevel       Int?
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@index([userId, date])
  @@map("daily_health")
}

model DailyWorkout {
  id                   String   @id @default(cuid())
  userId               String
  date                 String
  exercises            Json     @default("[]")
  totalExercises       Int      @default(0)
  completedExercises   Int      @default(0)
  completionPercentage Float    @default(0)
  durationMinutes      Int?
  notes                String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@index([userId, date])
  @@map("daily_workouts")
}

model DailyHabits {
  id                     String   @id @default(cuid())
  userId                 String
  date                   String
  screenTimeMinutes      Int      @default(0)
  bullshitContentMinutes Int      @default(0)
  noWeed                 Boolean  @default(false)
  noScrolling            Boolean  @default(false)
  deepWorkHours          Float    @default(0)
  lightWorkHours         Float    @default(0)
  habitsData             Json     @default("{}")
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@index([userId, date])
  @@map("daily_habits")
}

model DailyReflections {
  id            String   @id @default(cuid())
  userId        String
  date          String
  wentWell      String[]
  evenBetterIf  String[]
  analysis      String[]
  patterns      String[]
  changes       String[]
  overallRating Int?
  keyLearnings  String?
  tomorrowFocus String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@index([userId, date])
  @@map("daily_reflections")
}

model TimeBlock {
  id          String            @id @default(cuid())
  userId      String
  date        String
  startTime   String
  endTime     String
  title       String
  description String?
  category    TimeBlockCategory
  completed   Boolean           @default(false)
  actualStart String?
  actualEnd   String?
  notes       String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, date])
  @@index([userId, date, startTime])
  @@map("time_blocks")
}

model MorningRoutineTracking {
  id              String   @id @default(cuid())
  userId          String
  date            String
  wakeUp          Boolean  @default(false)
  getBloodFlowing Boolean  @default(false)
  freshenUp       Boolean  @default(false)
  powerUpBrain    Boolean  @default(false)
  planDay         Boolean  @default(false)
  meditation      Boolean  @default(false)
  pushups         Boolean  @default(false)
  situps          Boolean  @default(false)
  pullups         Boolean  @default(false)
  bathroom        Boolean  @default(false)
  brushTeeth      Boolean  @default(false)
  coldShower      Boolean  @default(false)
  water           Boolean  @default(false)
  supplements     Boolean  @default(false)
  preworkout      Boolean  @default(false)
  thoughtDump     Boolean  @default(false)
  planDeepWork    Boolean  @default(false)
  planLightWork   Boolean  @default(false)
  setTimebox      Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@index([userId, date])
  @@map("morning_routine_tracking")
}

model XPBalance {
  id           String       @id @default(cuid())
  userId       String       @unique
  currentXP    Int          @default(0)
  totalEarned  Int          @default(0)
  totalSpent   Int          @default(0)
  reserveXP    Int          @default(200)
  pendingLoans Int          @default(0)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  xpLoans      XPLoan[]     @relation("UserLoans")
  xpPurchases  XPPurchase[] @relation("UserPurchases")

  @@index([userId])
  @@map("xp_balance")
}

model RewardDefinition {
  id                 String       @id @default(cuid())
  category           String
  name               String
  description        String
  basePrice          Int
  iconEmoji          String
  isActive           Boolean      @default(true)
  requiresStreak     Int?
  maxDailyUse        Int          @default(1)
  availabilityWindow String?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  purchases          XPPurchase[] @relation("RewardPurchases")

  @@index([category, isActive])
  @@map("reward_definitions")
}

model XPPurchase {
  id                 String           @id @default(cuid())
  userId             String
  rewardId           String
  xpSpent            Int
  actualPrice        Int
  purchaseType       String           @default("DIRECT")
  notes              String?
  satisfactionRating Int?
  guiltLevel         Int?
  wasPlanned         Boolean          @default(false)
  celebrationLevel   String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  user               XPBalance        @relation("UserPurchases", fields: [userId], references: [userId], map: "xp_purchases_user_fkey")
  reward             RewardDefinition @relation("RewardPurchases", fields: [rewardId], references: [id], map: "xp_purchases_reward_fkey")
  user               User             @relation("UserPurchases", fields: [userId], references: [id], onDelete: Cascade, map: "xp_purchases_user_fkey")

  @@index([userId, createdAt])
  @@index([rewardId, createdAt])
  @@map("xp_purchases")
}

model XPLoan {
  id                   String    @id @default(cuid())
  userId               String
  amount               Int
  interestRate         Float     @default(0.2)
  totalOwed            Int
  amountPaid           Int       @default(0)
  dueDate              DateTime
  status               String    @default("ACTIVE")
  associatedPurchaseId String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  user                 XPBalance @relation("UserLoans", fields: [userId], references: [userId], map: "xp_loans_user_fkey")
  user                 User      @relation("UserLoans", fields: [userId], references: [id], map: "xp_loans_user_fkey")

  @@index([userId, status])
  @@index([dueDate, status])
  @@map("xp_loans")
}

model XPEarningLog {
  id          String   @id @default(cuid())
  userId      String
  source      String
  sourceId    String?
  baseXP      Int
  finalXP     Int
  multipliers Json     @default("{}")
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([source, createdAt])
  @@map("xp_earning_log")
}

enum WorkType {
  DEEP
  LIGHT
  MORNING
}

enum TaskDifficulty {
  TRIVIAL
  EASY
  MODERATE
  HARD
  EXPERT
}

enum Priority {
  CRITICAL
  URGENT
  HIGH
  MEDIUM
  LOW
}

enum EisenhowerQuadrant {
  DO_FIRST
  SCHEDULE
  DELEGATE
  ELIMINATE
}

enum AchievementCategory {
  STREAK
  POINTS
  COMPLETION
  CONSISTENCY
}

enum AutomationCategory {
  DEVELOPMENT
  TESTING
  DEPLOYMENT
  ANALYSIS
  MAINTENANCE
}

enum AutomationStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  PAUSED
}

enum RoutineType {
  MORNING
  EVENING
}

enum TimeBlockCategory {
  DEEP_WORK
  LIGHT_WORK
  MEETING
  BREAK
  PERSONAL
  HEALTH
  LEARNING
  ADMIN
}
