name: E2E and Smoke Tests

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test-suite:
        description: 'Test suite to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - smoke
          - e2e
          - mobile
          - cross-browser

env:
  NODE_VERSION: '20'
  PLAYWRIGHT_BROWSERS_PATH: ${{ github.workspace }}/pw-browsers

jobs:
  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Cache Playwright browsers
        uses: actions/cache@v3
        id: playwright-cache
        with:
          path: ${{ env.PLAYWRIGHT_BROWSERS_PATH }}
          key: ${{ runner.os }}-playwright-${{ hashFiles('package-lock.json') }}
          
      - name: Install Playwright browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install chromium
        
      - name: Setup test environment
        run: |
          cp .env.example .env.test 2>/dev/null || true
          echo "BASE_URL=http://localhost:5173" >> .env.test
          
      - name: Build application
        run: npm run build
        
      - name: Run smoke tests
        run: npm run test:e2e:smoke
        env:
          CI: true
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: smoke-test-results
          path: |
            test-results.json
            playwright-report/
            test-screenshots/
          retention-days: 7

  e2e-tests:
    name: E2E Tests - ${{ matrix.browser }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: smoke-tests
    
    strategy:
      fail-fast: false
      matrix:
        browser: [chrome, firefox]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Cache Playwright browsers
        uses: actions/cache@v3
        id: playwright-cache
        with:
          path: ${{ env.PLAYWRIGHT_BROWSERS_PATH }}
          key: ${{ runner.os }}-playwright-${{ matrix.browser }}-${{ hashFiles('package-lock.json') }}
          
      - name: Install Playwright browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: |
          if [ "${{ matrix.browser }}" = "chrome" ]; then
            npx playwright install chromium
          elif [ "${{ matrix.browser }}" = "firefox" ]; then
            npx playwright install firefox
          fi
          
      - name: Setup test environment
        run: |
          cp .env.example .env.test 2>/dev/null || true
          echo "BASE_URL=http://localhost:5173" >> .env.test
          
      - name: Build application
        run: npm run build
        
      - name: Run E2E tests
        run: |
          if [ "${{ matrix.browser }}" = "chrome" ]; then
            npm run test:e2e
          elif [ "${{ matrix.browser }}" = "firefox" ]; then
            npx playwright test --project=firefox
          fi
        env:
          CI: true
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-test-results-${{ matrix.browser }}
          path: |
            test-results.json
            playwright-report/
            test-screenshots/
            test-videos/
            test-traces/
          retention-days: 7

  mobile-tests:
    name: Mobile Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: smoke-tests
    if: github.event_name == 'push' || github.event.inputs.test-suite == 'mobile' || github.event.inputs.test-suite == 'all'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Cache Playwright browsers
        uses: actions/cache@v3
        id: playwright-cache
        with:
          path: ${{ env.PLAYWRIGHT_BROWSERS_PATH }}
          key: ${{ runner.os }}-playwright-mobile-${{ hashFiles('package-lock.json') }}
          
      - name: Install Playwright browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install webkit
        
      - name: Setup test environment
        run: |
          cp .env.example .env.test 2>/dev/null || true
          echo "BASE_URL=http://localhost:5173" >> .env.test
          
      - name: Build application
        run: npm run build
        
      - name: Run mobile tests
        run: npm run test:e2e:mobile
        env:
          CI: true
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: mobile-test-results
          path: |
            test-results.json
            playwright-report/
            test-screenshots/
          retention-days: 7

  cross-browser-tests:
    name: Cross-Browser Tests
    runs-on: macos-latest
    timeout-minutes: 40
    needs: smoke-tests
    if: github.event_name == 'schedule' || github.event.inputs.test-suite == 'cross-browser' || github.event.inputs.test-suite == 'all'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        
      - name: Setup test environment
        run: |
          cp .env.example .env.test 2>/dev/null || true
          echo "BASE_URL=http://localhost:5173" >> .env.test
          
      - name: Build application
        run: npm run build
        
      - name: Run cross-browser tests
        run: npm run test:e2e:cross-browser
        env:
          CI: true
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: cross-browser-test-results
          path: |
            test-results.json
            playwright-report/
            test-screenshots/
            test-videos/
          retention-days: 7

  test-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: [smoke-tests, e2e-tests, mobile-tests, cross-browser-tests]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all test results
        uses: actions/download-artifact@v3
        with:
          path: all-test-results/
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Merge test results
        run: |
          mkdir -p merged-results
          find all-test-results -name "test-results.json" -exec cp {} merged-results/ \;
          
      - name: Generate consolidated report
        run: |
          echo "# Test Results Summary" > test-summary.md
          echo "" >> test-summary.md
          echo "## Test Execution: $(date)" >> test-summary.md
          echo "" >> test-summary.md
          
          for file in merged-results/*.json; do
            if [ -f "$file" ]; then
              echo "### $(basename $file .json)" >> test-summary.md
              cat "$file" | jq -r '.summary | "- Total: \(.total)\n- Passed: \(.passed)\n- Failed: \(.failed)\n- Skipped: \(.skipped)"' >> test-summary.md 2>/dev/null || echo "- Unable to parse results" >> test-summary.md
              echo "" >> test-summary.md
            fi
          done
          
      - name: Upload final report
        uses: actions/upload-artifact@v3
        with:
          name: final-test-report
          path: |
            test-summary.md
            merged-results/
          retention-days: 30
          
      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('test-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

  notify-failure:
    name: Notify Test Failures
    runs-on: ubuntu-latest
    needs: [smoke-tests, e2e-tests]
    if: failure()
    
    steps:
      - name: Send notification
        run: |
          echo "Tests failed! Check the workflow run for details."
          # Add your notification logic here (Slack, email, etc.)