#!/usr/bin/env bash
set -euo pipefail

# codex-think: create a plan-verify bundle to drive higher-reasoning sessions

if [[ $# -eq 0 ]]; then
  echo "Usage: $(basename "$0") <objective> [--check 'acceptance test' ...] [--constraint key=val]" >&2
  exit 2
fi

timestamp=$(date +%Y%m%d-%H%M%S)
slug=$(printf "%s" "$1" | tr -cd '[:alnum:] _.-' | tr ' ' '-' | cut -c1-40)
slug=${slug:-objective}
root="SISO-INTERNAL/.codex-plan-verify"
dir="$root/${timestamp}-${slug}"
mkdir -p "$dir"
bundle="$dir/bundle.json"

objective="$1"; shift || true
checks=()
constraints=()
while [[ $# -gt 0 ]]; do
  case "$1" in
    --check)
      checks+=("$2"); shift 2;;
    --constraint)
      constraints+=("$2"); shift 2;;
    *)
      break;;
  esac
done

if command -v python3 >/dev/null 2>&1; then
python3 - "$bundle" "$objective" "${checks[@]:-}" "${constraints[@]:-}" <<'PY'
import json, os, sys
from pathlib import Path

bundle_path, objective = sys.argv[1], sys.argv[2]
args = sys.argv[3:]
checks, constraints = [], []
mode = 'checks'
for a in args:
    if '=' in a and mode == 'checks':
        mode = 'constraints'
    if mode == 'checks' and a:
        checks.append(a)
    elif mode == 'constraints' and a:
        k, _, v = a.partition('=')
        constraints.append({k: v})

bundle = {
  "schema": "codex.plan-verify-bundle/v1",
  "created_at": os.popen('date -Iseconds').read().strip(),
  "cwd": os.getcwd(),
  "objective": objective,
  "acceptance_checks": checks,
  "constraints": constraints,
}
Path(bundle_path).write_text(json.dumps(bundle, indent=2))
print(bundle_path)
PY
else
  printf '{\n  "schema": "codex.plan-verify-bundle/v1",\n  "objective": %q\n}\n' "$objective" > "$bundle"
  printf '%s\n' "$bundle"
fi

ln -sfn "$(basename "$dir")" "$root/latest"
echo "Plan-Verify bundle saved:" >&2
echo "  $bundle" >&2
echo "Start Codex with profile 'plan-verify'." >&2

