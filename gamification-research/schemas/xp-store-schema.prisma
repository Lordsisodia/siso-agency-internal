// XP Store Database Schema Extension
// Add these models to your existing enhanced-schema.prisma

model XPBalance {
  id              String   @id @default(cuid())
  userId          String   @unique
  currentXP       Int      @default(0)
  totalEarned     Int      @default(0)
  totalSpent      Int      @default(0)
  pendingLoans    Int      @default(0)
  loanInterest    Int      @default(0)
  reserveXP       Int      @default(0)   // Emergency fund
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  purchases       XPPurchase[]
  loans           XPLoan[]
  subscriptions   XPSubscription[]
  
  @@map("xp_balances")
}

model XPPurchase {
  id              String          @id @default(cuid())
  userId          String
  balanceId       String
  rewardType      RewardCategory
  rewardName      String
  rewardDescription String?
  xpCost          Int
  originalPrice   Int             // Base price before modifiers
  actualPrice     Int             // Final price paid (after discounts/multipliers)
  discountAmount  Int             @default(0)
  priceMultiplier Float           @default(1.0)
  
  // Usage tracking
  purchasedAt     DateTime        @default(now())
  consumed        Boolean         @default(false)
  consumedAt      DateTime?
  expiresAt       DateTime?       // For time-limited rewards
  usageNotes      String?         // How was the reward used
  satisfaction    Int?            // 1-10 satisfaction rating
  
  // Bundle information
  isBundle        Boolean         @default(false)
  bundleName      String?
  bundleItems     String[]        // JSON array of included items
  
  // Loan information
  isLoan          Boolean         @default(false)
  loanId          String?
  
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  balance         XPBalance       @relation(fields: [balanceId], references: [id], onDelete: Cascade)
  loan            XPLoan?         @relation(fields: [loanId], references: [id])
  
  @@index([userId, purchasedAt])
  @@index([userId, rewardType])
  @@index([userId, consumed])
  @@map("xp_purchases")
}

model XPLoan {
  id              String          @id @default(cuid())
  userId          String
  balanceId       String
  amount          Int
  interestRate    Float           @default(0.2)  // 20% interest
  totalOwed       Int             // amount + interest
  paidAmount      Int             @default(0)
  
  // Loan terms
  issuedAt        DateTime        @default(now())
  dueDate         DateTime
  gracePeriod     Int             @default(3)    // Days grace period
  
  // Status
  status          LoanStatus      @default(ACTIVE)
  repaidAt        DateTime?
  defaultedAt     DateTime?
  
  // Penalties
  penaltyType     PenaltyType?
  penaltyAmount   Int?
  penaltyApplied  Boolean         @default(false)
  
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  balance         XPBalance       @relation(fields: [balanceId], references: [id], onDelete: Cascade)
  purchases       XPPurchase[]
  
  @@index([userId, status])
  @@index([userId, dueDate])
  @@map("xp_loans")
}

model XPSubscription {
  id              String              @id @default(cuid())
  userId          String
  balanceId       String
  subscriptionType SubscriptionType
  name            String
  description     String
  xpCost          Int                 // Total XP cost
  duration        Int                 // Days
  dailyXPCost     Int                 // Daily XP deduction
  
  // Status
  isActive        Boolean             @default(true)
  startDate       DateTime            @default(now())
  endDate         DateTime
  autoRenew       Boolean             @default(false)
  
  // Usage tracking
  usageCount      Int                 @default(0)
  lastUsed        DateTime?
  satisfactionRating Int?
  
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  balance         XPBalance           @relation(fields: [balanceId], references: [id], onDelete: Cascade)
  
  @@index([userId, isActive])
  @@index([userId, subscriptionType])
  @@map("xp_subscriptions")
}

model RewardDefinition {
  id              String          @id @default(cuid())
  category        RewardCategory
  name            String
  description     String
  basePrice       Int
  iconEmoji       String
  
  // Dynamic pricing factors
  demandMultiplier Float          @default(1.0)
  seasonalMultiplier Float        @default(1.0)
  availabilityWindow String?      // "weekends_only", "evenings", etc.
  
  // Requirements
  minimumLevel    Int             @default(1)
  requiredStreak  Int?
  maxDailyUse     Int?
  maxWeeklyUse    Int?
  
  // Metadata
  tags            String[]
  isActive        Boolean         @default(true)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  @@unique([category, name])
  @@map("reward_definitions")
}

model SpendingPattern {
  id              String          @id @default(cuid())
  userId          String
  
  // Weekly patterns
  weeklyXPEarned  Int
  weeklyXPSpent   Int
  weeklyBalance   Int
  
  // Category breakdown
  cannabisSpent   Int             @default(0)
  timeOffSpent    Int             @default(0)
  foodSpent       Int             @default(0)
  entertainmentSpent Int          @default(0)
  luxurySpent     Int             @default(0)
  
  // Behavioral metrics
  impulseRatio    Float           @default(0)    // Immediate vs planned purchases
  savingsRate     Float           @default(0)    // XP saved vs earned
  addictionScore  Float           @default(0)    // Addiction risk indicator
  
  // Time period
  weekStartDate   DateTime
  weekEndDate     DateTime
  createdAt       DateTime        @default(now())
  
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, weekStartDate])
  @@index([userId, weekStartDate])
  @@map("spending_patterns")
}

// Enums
enum RewardCategory {
  CANNABIS
  TIME_OFF
  FOOD
  ENTERTAINMENT
  LUXURY_PURCHASE
  SUBSCRIPTION
  BUNDLE
}

enum LoanStatus {
  ACTIVE
  REPAID
  DEFAULTED
  GRACE_PERIOD
}

enum PenaltyType {
  LOSE_STREAK
  XP_MULTIPLIER_REDUCTION
  REWARD_RESTRICTION
  INTEREST_INCREASE
}

enum SubscriptionType {
  DAILY_CANNABIS
  WEEKEND_FREEDOM
  MONTHLY_LUXURY
  GAMING_UNLIMITED
  FOOD_ALLOWANCE
}

// Update User model to include XP store relations
model User {
  // ... existing fields ...
  
  // XP Store relations
  xpBalance       XPBalance?
  xpPurchases     XPPurchase[]
  xpLoans         XPLoan[]
  xpSubscriptions XPSubscription[]
  spendingPatterns SpendingPattern[]
}

// Add indexes for performance
// CREATE INDEX idx_xp_purchases_user_date ON xp_purchases(userId, purchasedAt);
// CREATE INDEX idx_xp_purchases_category ON xp_purchases(userId, rewardType);
// CREATE INDEX idx_spending_patterns_weekly ON spending_patterns(userId, weekStartDate);
// CREATE INDEX idx_xp_loans_status ON xp_loans(userId, status, dueDate);